{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "toc_visible": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "source": [
        "# Assignment 4\n",
        "## Spam Classification\n",
        "### Import Libraries"
      ],
      "metadata": {
        "id": "TkwcONlr-yPl"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "import pandas as pd\n",
        "import numpy as np\n",
        "import matplotlib.pyplot as plt\n",
        "import seaborn as sns\n",
        "from sklearn.model_selection import train_test_split\n",
        "from sklearn.preprocessing import LabelEncoder\n",
        "from keras.models import Model\n",
        "from keras.layers import LSTM, Activation, Dense, Dropout, Input, Embedding\n",
        "from keras.optimizers import RMSprop\n",
        "from keras.preprocessing.text import Tokenizer\n",
        "from keras.preprocessing import sequence\n",
        "from keras.utils import to_categorical\n",
        "from keras.callbacks import EarlyStopping \n",
        "import tensorflow \n",
        "from tensorflow.keras.preprocessing.sequence import pad_sequences"
      ],
      "metadata": {
        "id": "rxgWZCxQ-6zz"
      },
      "execution_count": 11,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "### Read CSV File"
      ],
      "metadata": {
        "id": "9p6lv1MY_Fhx"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "df = pd.read_csv('/content/drive/MyDrive/spam.csv',encoding='ISO-8859-1')"
      ],
      "metadata": {
        "id": "FGSQHbvB_Mkf"
      },
      "execution_count": 20,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "df.head()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 206
        },
        "id": "n4RjCThvG2r-",
        "outputId": "b559ce62-591f-4b24-9f56-71920589265f"
      },
      "execution_count": 21,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "     v1                                                 v2 Unnamed: 2  \\\n",
              "0   ham  Go until jurong point, crazy.. Available only ...        NaN   \n",
              "1   ham                      Ok lar... Joking wif u oni...        NaN   \n",
              "2  spam  Free entry in 2 a wkly comp to win FA Cup fina...        NaN   \n",
              "3   ham  U dun say so early hor... U c already then say...        NaN   \n",
              "4   ham  Nah I don't think he goes to usf, he lives aro...        NaN   \n",
              "\n",
              "  Unnamed: 3 Unnamed: 4  \n",
              "0        NaN        NaN  \n",
              "1        NaN        NaN  \n",
              "2        NaN        NaN  \n",
              "3        NaN        NaN  \n",
              "4        NaN        NaN  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-5b847955-523f-4b57-849b-00aad87534af\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>v1</th>\n",
              "      <th>v2</th>\n",
              "      <th>Unnamed: 2</th>\n",
              "      <th>Unnamed: 3</th>\n",
              "      <th>Unnamed: 4</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>ham</td>\n",
              "      <td>Go until jurong point, crazy.. Available only ...</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>ham</td>\n",
              "      <td>Ok lar... Joking wif u oni...</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>spam</td>\n",
              "      <td>Free entry in 2 a wkly comp to win FA Cup fina...</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>ham</td>\n",
              "      <td>U dun say so early hor... U c already then say...</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>ham</td>\n",
              "      <td>Nah I don't think he goes to usf, he lives aro...</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-5b847955-523f-4b57-849b-00aad87534af')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "        \n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "      \n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-5b847955-523f-4b57-849b-00aad87534af button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-5b847955-523f-4b57-849b-00aad87534af');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n",
              "  "
            ]
          },
          "metadata": {},
          "execution_count": 21
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "df.drop(['Unnamed: 2', 'Unnamed: 3', 'Unnamed: 4'], axis=1, inplace=True)\n",
        "df.head(10)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 363
        },
        "id": "Xk-_VS0_LqOS",
        "outputId": "63ed7a53-ecfd-4db3-a5eb-45ea1963c173"
      },
      "execution_count": 22,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "     v1                                                 v2\n",
              "0   ham  Go until jurong point, crazy.. Available only ...\n",
              "1   ham                      Ok lar... Joking wif u oni...\n",
              "2  spam  Free entry in 2 a wkly comp to win FA Cup fina...\n",
              "3   ham  U dun say so early hor... U c already then say...\n",
              "4   ham  Nah I don't think he goes to usf, he lives aro...\n",
              "5  spam  FreeMsg Hey there darling it's been 3 week's n...\n",
              "6   ham  Even my brother is not like to speak with me. ...\n",
              "7   ham  As per your request 'Melle Melle (Oru Minnamin...\n",
              "8  spam  WINNER!! As a valued network customer you have...\n",
              "9  spam  Had your mobile 11 months or more? U R entitle..."
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-03dbbf6a-e579-4eae-9cbf-daa526a2827c\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>v1</th>\n",
              "      <th>v2</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>ham</td>\n",
              "      <td>Go until jurong point, crazy.. Available only ...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>ham</td>\n",
              "      <td>Ok lar... Joking wif u oni...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>spam</td>\n",
              "      <td>Free entry in 2 a wkly comp to win FA Cup fina...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>ham</td>\n",
              "      <td>U dun say so early hor... U c already then say...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>ham</td>\n",
              "      <td>Nah I don't think he goes to usf, he lives aro...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>5</th>\n",
              "      <td>spam</td>\n",
              "      <td>FreeMsg Hey there darling it's been 3 week's n...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>6</th>\n",
              "      <td>ham</td>\n",
              "      <td>Even my brother is not like to speak with me. ...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>7</th>\n",
              "      <td>ham</td>\n",
              "      <td>As per your request 'Melle Melle (Oru Minnamin...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>8</th>\n",
              "      <td>spam</td>\n",
              "      <td>WINNER!! As a valued network customer you have...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>9</th>\n",
              "      <td>spam</td>\n",
              "      <td>Had your mobile 11 months or more? U R entitle...</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-03dbbf6a-e579-4eae-9cbf-daa526a2827c')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "        \n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "      \n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-03dbbf6a-e579-4eae-9cbf-daa526a2827c button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-03dbbf6a-e579-4eae-9cbf-daa526a2827c');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n",
              "  "
            ]
          },
          "metadata": {},
          "execution_count": 22
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "###Model Creation"
      ],
      "metadata": {
        "id": "TE6pzJwILyd0"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "X = df.v2\n",
        "Y = df.v1\n",
        "le = LabelEncoder()\n",
        "Y = le.fit_transform(Y)\n",
        "Y = Y.reshape(-1,1)"
      ],
      "metadata": {
        "id": "8ei6opGmMEKx"
      },
      "execution_count": 23,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "X_train, X_test, Y_train, Y_test = train_test_split(X, Y, test_size=0.30, random_state=7)"
      ],
      "metadata": {
        "id": "U1Pj8EDFMKep"
      },
      "execution_count": 24,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "max_words = 1000\n",
        "max_len = 150\n",
        "tok = Tokenizer(num_words=max_words)\n",
        "tok.fit_on_texts(X_train)\n",
        "sequences = tok.texts_to_sequences(X_train)\n",
        "sequences_matrix = pad_sequences(sequences,maxlen=max_len)"
      ],
      "metadata": {
        "id": "dUahDxLqMSAC"
      },
      "execution_count": 25,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "###Adding Layers"
      ],
      "metadata": {
        "id": "b-bUQyUxMZIj"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "def RNN_model():\n",
        " inputs = Input(name='inputs', shape=(max_len))\n",
        " layer = Embedding(max_words, 50, input_length=max_len)(inputs)\n",
        " layer = LSTM(64)(layer)\n",
        " layer = Dense(256, name='FC1')(layer)\n",
        " layer = Activation('relu')(layer)\n",
        " layer = Dropout(0.5)(layer)\n",
        " layer = Dense(1, name='out_layer')(layer)\n",
        " layer = Activation('sigmoid')(layer)\n",
        " model = Model(inputs=inputs, outputs=layer)\n",
        " return model"
      ],
      "metadata": {
        "id": "y7qSqVVkMeZs"
      },
      "execution_count": 26,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "###Model Compilation"
      ],
      "metadata": {
        "id": "FzM0fRYIMk9R"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "model = RNN_model()\n",
        "model.compile(loss='binary_crossentropy', optimizer='adam', metrics=['accuracy'])"
      ],
      "metadata": {
        "id": "FuLY6INvMq2-"
      },
      "execution_count": 27,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "model.summary()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "LowJURzLMwrp",
        "outputId": "402cf107-b96d-47c3-95ea-b70cc2403dbd"
      },
      "execution_count": 28,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Model: \"model\"\n",
            "_________________________________________________________________\n",
            " Layer (type)                Output Shape              Param #   \n",
            "=================================================================\n",
            " inputs (InputLayer)         [(None, 150)]             0         \n",
            "                                                                 \n",
            " embedding (Embedding)       (None, 150, 50)           50000     \n",
            "                                                                 \n",
            " lstm (LSTM)                 (None, 64)                29440     \n",
            "                                                                 \n",
            " FC1 (Dense)                 (None, 256)               16640     \n",
            "                                                                 \n",
            " activation (Activation)     (None, 256)               0         \n",
            "                                                                 \n",
            " dropout (Dropout)           (None, 256)               0         \n",
            "                                                                 \n",
            " out_layer (Dense)           (None, 1)                 257       \n",
            "                                                                 \n",
            " activation_1 (Activation)   (None, 1)                 0         \n",
            "                                                                 \n",
            "=================================================================\n",
            "Total params: 96,337\n",
            "Trainable params: 96,337\n",
            "Non-trainable params: 0\n",
            "_________________________________________________________________\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "###Model Fit"
      ],
      "metadata": {
        "id": "vh3advyeM6Ja"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "data = model.fit(sequences_matrix, Y_train, batch_size=16, epochs=10, validation_split=0.25)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "SnRid7pINCRR",
        "outputId": "bdb90c87-4266-47ce-8c49-0b66fea75988"
      },
      "execution_count": 30,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Epoch 1/10\n",
            "183/183 [==============================] - 19s 88ms/step - loss: 0.1844 - accuracy: 0.9419 - val_loss: 0.0658 - val_accuracy: 0.9846\n",
            "Epoch 2/10\n",
            "183/183 [==============================] - 16s 85ms/step - loss: 0.0323 - accuracy: 0.9901 - val_loss: 0.0554 - val_accuracy: 0.9877\n",
            "Epoch 3/10\n",
            "183/183 [==============================] - 17s 93ms/step - loss: 0.0146 - accuracy: 0.9962 - val_loss: 0.0736 - val_accuracy: 0.9867\n",
            "Epoch 4/10\n",
            "183/183 [==============================] - 16s 87ms/step - loss: 0.0072 - accuracy: 0.9973 - val_loss: 0.0721 - val_accuracy: 0.9856\n",
            "Epoch 5/10\n",
            "183/183 [==============================] - 17s 91ms/step - loss: 0.0015 - accuracy: 1.0000 - val_loss: 0.0948 - val_accuracy: 0.9877\n",
            "Epoch 6/10\n",
            "183/183 [==============================] - 16s 89ms/step - loss: 2.3207e-04 - accuracy: 1.0000 - val_loss: 0.0898 - val_accuracy: 0.9877\n",
            "Epoch 7/10\n",
            "183/183 [==============================] - 17s 94ms/step - loss: 4.5480e-04 - accuracy: 1.0000 - val_loss: 0.0845 - val_accuracy: 0.9887\n",
            "Epoch 8/10\n",
            "183/183 [==============================] - 16s 85ms/step - loss: 8.6568e-04 - accuracy: 0.9997 - val_loss: 0.1000 - val_accuracy: 0.9877\n",
            "Epoch 9/10\n",
            "183/183 [==============================] - 17s 95ms/step - loss: 0.0040 - accuracy: 0.9986 - val_loss: 0.1034 - val_accuracy: 0.9867\n",
            "Epoch 10/10\n",
            "183/183 [==============================] - 17s 94ms/step - loss: 2.7571e-04 - accuracy: 1.0000 - val_loss: 0.1147 - val_accuracy: 0.9856\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "plt.figure()\n",
        "plt.xlabel('Epochs')\n",
        "plt.ylabel('Validation Accuracy')\n",
        "plt.plot(data.epoch,data.history['val_accuracy'])"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 296
        },
        "id": "o5PtJbk5OQcf",
        "outputId": "0779ea50-bf5b-4707-d38a-3ea1ec82d16b"
      },
      "execution_count": 31,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "[<matplotlib.lines.Line2D at 0x7f22b7080f10>]"
            ]
          },
          "metadata": {},
          "execution_count": 31
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ],
            "image/png": "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\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "plt.figure()\n",
        "plt.xlabel('Epochs')\n",
        "plt.ylabel('Training Loss')\n",
        "plt.plot(data.epoch, data.history['loss'])"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 296
        },
        "id": "UYhnJ8xfOcq9",
        "outputId": "b268ea5e-4910-42f5-9857-b64d7f4847eb"
      },
      "execution_count": 32,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "[<matplotlib.lines.Line2D at 0x7f22ba67bf90>]"
            ]
          },
          "metadata": {},
          "execution_count": 32
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "###Saving Model"
      ],
      "metadata": {
        "id": "NttgXrJLOgzj"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "model.save('Spam_Detector_model.h5')"
      ],
      "metadata": {
        "id": "p6PsI_kTOmF9"
      },
      "execution_count": 33,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "###Testing the Model"
      ],
      "metadata": {
        "id": "Bpbf3-qdOunb"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "test_sequences = tok.texts_to_sequences(X_test)\n",
        "test_sequences_matrix = pad_sequences(test_sequences,maxlen=max_len)"
      ],
      "metadata": {
        "id": "YG94z2VHOyIe"
      },
      "execution_count": 34,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "test_accuracy = model.evaluate(test_sequences_matrix, Y_test)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "JJbaa-wLO3vx",
        "outputId": "9be8544c-7a47-4b9f-e209-94fab9e4e115"
      },
      "execution_count": 35,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "53/53 [==============================] - 1s 27ms/step - loss: 0.1588 - accuracy: 0.9815\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "model.metrics_names"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "fBpUvxsiO91s",
        "outputId": "3a7f7780-71c3-48d8-988b-3449ed3e4b13"
      },
      "execution_count": 36,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "['loss', 'accuracy']"
            ]
          },
          "metadata": {},
          "execution_count": 36
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "print('Test Loss: {: 0.4f} and Test Accuracy: {: 0.2f}%'.format(test_accuracy[0], test_accuracy[1]*100))"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "Om6JDy1lPDvk",
        "outputId": "06edc630-34cc-4308-fd3d-bf29397dc0aa"
      },
      "execution_count": 37,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Test Loss:  0.1588 and Test Accuracy:  98.15%\n"
          ]
        }
      ]
    }
  ]
}
